{"version":3,"sources":["TipCalc.js","App.js","reportWebVitals.js","index.js"],"names":["TipCalc","props","state","bill","tip","split","tipAmount","this","tipPerPerson","totalAmount","totalPerPerson","className","toFixed","value","type","onChange","e","setState","parseFloat","target","parseInt","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAiFeA,G,wDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,GACNC,IAAK,GACLC,MAAO,GANQ,E,qDAUT,IAAD,OACDC,EAAYC,KAAKL,MAAMC,KAAOI,KAAKL,MAAME,IAAM,IAC/CI,EAAeF,EAAYC,KAAKL,MAAMG,MACtCI,EAAcH,EAAYC,KAAKL,MAAMC,KACrCO,EAAiBD,EAAcF,KAAKL,MAAMG,MAEhD,OAEE,sBAAKM,UAAU,gBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,oCACA,mCAAML,EAAUM,QAAQ,MAExB,sCACA,mCAAMH,EAAYG,QAAQ,MAE1B,+CACA,mCAAMJ,EAAaI,QAAQ,MAE3B,iDACA,mCAAMF,EAAeE,QAAQ,SAG/B,sBAAKD,UAAU,mBAAf,UACE,gDACA,+BACE,qCACE,4BACE,kCACE,qCACA,uBACEE,MAAON,KAAKL,MAAMC,KAClBW,KAAK,SACLC,SAAW,SAACC,GAAQ,EAAKC,SAAU,CAAEd,KAAMe,WAAWF,EAAEG,OAAON,iBAKrE,4BACE,kCACE,sCACA,uBACEA,MAAON,KAAKL,MAAME,IAClBU,KAAK,SACLC,SAAW,SAACC,GAAQ,EAAKC,SAAU,CAAEb,IAAKc,WAAWF,EAAEG,OAAON,iBAKpE,4BACE,kCACE,4CACA,uBACEA,MAAON,KAAKL,MAAMG,MAClBS,KAAK,SACLC,SAAW,SAACC,GAAQ,EAAKC,SAAU,CAAEZ,MAAOe,SAASJ,EAAEG,OAAON,gC,GAlE5DQ,cCUPC,MATf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a116b07e.chunk.js","sourcesContent":["import react, { Component } from 'react'\nimport './TipCalc.css';\n\nclass TipCalc extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      bill: 10.00,\n      tip: 15,\n      split: 2\n    }\n  }\n\n  render() {\n    const tipAmount = this.state.bill * this.state.tip / 100;\n    const tipPerPerson = tipAmount / this.state.split;\n    const totalAmount = tipAmount + this.state.bill;\n    const totalPerPerson = totalAmount / this.state.split;\n\n    return (\n      \n      <div className=\"FlexContainer\">\n        <div className=\"FlexChild Calculations\">\n          <p>Tip</p>\n          <h2>${tipAmount.toFixed(2)}</h2>\n\n          <p>Total</p>\n          <h2>${totalAmount.toFixed(2)}</h2>\n\n          <p>Tip Per Person</p>\n          <h2>${tipPerPerson.toFixed(2)}</h2>\n\n          <p>Total Per Person</p>\n          <h2>${totalPerPerson.toFixed(2)}</h2>\n        </div>\n      \n        <div className=\"FlexChild Inputs\">\n          <h1>TIP CALCULATOR</h1>\n          <form>\n            <fieldset>\n              <p>\n                <label>\n                  <p>Bill</p>\n                  <input\n                    value={this.state.bill}\n                    type=\"number\"\n                    onChange={ (e) => { this.setState( { bill: parseFloat(e.target.value) } ) } }\n                  />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                  <p>Tip %</p>\n                  <input\n                    value={this.state.tip}\n                    type=\"number\"\n                    onChange={ (e) => { this.setState( { tip: parseFloat(e.target.value) } ) } }\n                  />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                  <p># of People</p>\n                  <input\n                    value={this.state.split}\n                    type=\"number\"\n                    onChange={ (e) => { this.setState( { split: parseInt(e.target.value) } ) } }\n                  />\n                </label>\n              </p>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TipCalc\n","import './App.css';\nimport TipCalc from './TipCalc';\n// import ExampleHooks from './ExampleHooks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TipCalc />\n      {/* <ExampleHooks /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}